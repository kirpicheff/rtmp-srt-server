// –°–∏—Å—Ç–µ–º–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
const translations = {
    ru: {
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        'header.subtitle': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å–µ—Ä–≤–µ—Ä–∞',

        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        'nav.status': 'üìä –°—Ç–∞—Ç—É—Å',
        'nav.inputs': 'üì• –í—Ö–æ–¥—ã',
        'nav.outputs': 'üì§ –í—ã—Ö–æ–¥—ã',
        'nav.settings': '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',

        // –û–±—â–∏–µ
        'common.loading': '–ó–∞–≥—Ä—É–∑–∫–∞...',
        'common.refresh': '–û–±–Ω–æ–≤–∏—Ç—å',
        'common.add': '–î–æ–±–∞–≤–∏—Ç—å',
        'common.remove': '–£–¥–∞–ª–∏—Ç—å',
        'common.reconnect': '–†–µ–∫–æ–Ω–Ω–µ–∫—Ç',
        'common.save': '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
        'common.cancel': '–û—Ç–º–µ–Ω–∞',
        'common.active': '–ê–∫—Ç–∏–≤–µ–Ω',
        'common.inactive': '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω',
        'common.bitrate': '–ë–∏—Ç—Ä–µ–π—Ç',
        'common.uptime': '–ê–ø—Ç–∞–π–º',
        'common.errors': '–û—à–∏–±–∫–∏',
        'common.status': '–°—Ç–∞—Ç—É—Å',
        'common.name': '–ò–º—è',
        'common.url': 'URL',
        'common.path': '–ü—É—Ç—å',
        'common.outputs': '–í—ã—Ö–æ–¥—ã',
        'common.connections': '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è',
        'common.lastUpdate': '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ',
        'common.updated': '–æ–±–Ω–æ–≤–ª–µ–Ω–æ',

        // –°—Ç–∞—Ç—É—Å
        'status.title': '–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞',
        'status.noInputs': '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤',
        'status.noOutputs': '–ù–µ—Ç –≤—ã—Ö–æ–¥–æ–≤',
        'status.loadError': '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞',

        // –í—Ö–æ–¥—ã
        'inputs.title': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ö–æ–¥–∞–º–∏',
        'inputs.addNew': '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤—Ö–æ–¥',
        'inputs.inputName': '–ò–º—è –≤—Ö–æ–¥–∞',
        'inputs.rtmpPath': '–ü—É—Ç—å RTMP',
        'inputs.outputsPlaceholder': 'srt://example.com:9000\nrtmp://example.com/live/stream',
        'inputs.outputsLabel': '–í—ã—Ö–æ–¥—ã (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É):',
        'inputs.existing': '–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤—Ö–æ–¥—ã',
        'inputs.noInputs': '–ù–µ—Ç –≤—Ö–æ–¥–æ–≤',
        'inputs.addSuccess': '–í—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω',
        'inputs.removeSuccess': '–í—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω',
        'inputs.removeConfirm': '–£–¥–∞–ª–∏—Ç—å –≤—Ö–æ–¥',
        'inputs.addError': '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Ö–æ–¥–∞',
        'inputs.removeError': '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ö–æ–¥–∞',
        'inputs.loadError': '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Ö–æ–¥–æ–≤',

        // –í—ã—Ö–æ–¥—ã
        'outputs.title': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞–º–∏',
        'outputs.addOutput': '–î–æ–±–∞–≤–∏—Ç—å –≤—ã—Ö–æ–¥',
        'outputs.input': '–í—Ö–æ–¥',
        'outputs.outputUrl': 'URL –≤—ã—Ö–æ–¥–∞',
        'outputs.management': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞–º–∏',
        'outputs.noInputsForManagement': '–ù–µ—Ç –≤—Ö–æ–¥–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞–º–∏',
        'outputs.noActiveInputs': '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤',
        'outputs.addSuccess': '–í—ã—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω',
        'outputs.removeSuccess': '–í—ã—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω',
        'outputs.reconnectInitiated': '–†–µ–∫–æ–Ω–Ω–µ–∫—Ç –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω',
        'outputs.removeConfirm': '–£–¥–∞–ª–∏—Ç—å –≤—ã—Ö–æ–¥',
        'outputs.addError': '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞',
        'outputs.removeError': '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞',
        'outputs.reconnectError': '–û—à–∏–±–∫–∞ —Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç–∞',
        'outputs.loadError': '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã—Ö–æ–¥–æ–≤',

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        'settings.title': '–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
        'settings.srt': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ SRT',
        'settings.latency': 'Latency (–º—Å):',
        'settings.timeout': 'Connect Timeout (–º—Å):',
        'settings.passphrase': 'Passphrase:',
        'settings.streamId': 'Stream ID:',
        'settings.logging': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è',
        'settings.logToFile': '–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤ —Ñ–∞–π–ª',
        'settings.logFile': '–§–∞–π–ª –ª–æ–≥–∞:',
        'settings.reconnectInterval': '–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è',
        'settings.reconnectIntervalLabel': '–ò–Ω—Ç–µ—Ä–≤–∞–ª (—Å–µ–∫—É–Ω–¥—ã):',
        'settings.saveSuccess': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã',
        'settings.reloadSuccess': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã',
        'settings.saveError': '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫',
        'settings.reloadError': '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫',
        'settings.loadError': '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫',
        'settings.reload': '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞'
    },
    en: {
        // Header
        'header.subtitle': 'Stream and server settings management',

        // Navigation
        'nav.status': 'üìä Status',
        'nav.inputs': 'üì• Inputs',
        'nav.outputs': 'üì§ Outputs',
        'nav.settings': '‚öôÔ∏è Settings',

        // Common
        'common.loading': 'Loading...',
        'common.refresh': 'Refresh',
        'common.add': 'Add',
        'common.remove': 'Remove',
        'common.reconnect': 'Reconnect',
        'common.save': 'Save',
        'common.cancel': 'Cancel',
        'common.active': 'Active',
        'common.inactive': 'Inactive',
        'common.bitrate': 'Bitrate',
        'common.uptime': 'Uptime',
        'common.errors': 'Errors',
        'common.status': 'Status',
        'common.name': 'Name',
        'common.url': 'URL',
        'common.path': 'Path',
        'common.outputs': 'Outputs',
        'common.connections': 'Connections',
        'common.lastUpdate': 'Last update',
        'common.updated': 'updated',

        // Status
        'status.title': 'Server Status Overview',
        'status.noInputs': 'No active inputs',
        'status.noOutputs': 'No outputs',
        'status.loadError': 'Error loading status',

        // Inputs
        'inputs.title': 'Input Management',
        'inputs.addNew': 'Add New Input',
        'inputs.inputName': 'Input Name',
        'inputs.rtmpPath': 'RTMP Path',
        'inputs.outputsPlaceholder': 'srt://example.com:9000\nrtmp://example.com/live/stream',
        'inputs.outputsLabel': 'Outputs (one per line):',
        'inputs.existing': 'Existing Inputs',
        'inputs.noInputs': 'No inputs',
        'inputs.addSuccess': 'Input successfully added',
        'inputs.removeSuccess': 'Input successfully removed',
        'inputs.removeConfirm': 'Remove input',
        'inputs.addError': 'Error adding input',
        'inputs.removeError': 'Error removing input',
        'inputs.loadError': 'Error loading inputs',

        // Outputs
        'outputs.title': 'Output Management',
        'outputs.addOutput': 'Add Output',
        'outputs.input': 'Input',
        'outputs.outputUrl': 'Output URL',
        'outputs.management': 'Output Management',
        'outputs.noInputsForManagement': 'No inputs available for output management',
        'outputs.noActiveInputs': 'No active inputs',
        'outputs.addSuccess': 'Output successfully added',
        'outputs.removeSuccess': 'Output successfully removed',
        'outputs.reconnectInitiated': 'Reconnect initiated',
        'outputs.removeConfirm': 'Remove output',
        'outputs.addError': 'Error adding output',
        'outputs.removeError': 'Error removing output',
        'outputs.reconnectError': 'Reconnect error',
        'outputs.loadError': 'Error loading outputs',

        // Settings
        'settings.title': 'Global Settings',
        'settings.srt': 'SRT Settings',
        'settings.latency': 'Latency (ms):',
        'settings.timeout': 'Connect Timeout (ms):',
        'settings.passphrase': 'Passphrase:',
        'settings.streamId': 'Stream ID:',
        'settings.logging': 'Logging Settings',
        'settings.logToFile': 'Log to file',
        'settings.logFile': 'Log file:',
        'settings.reconnectInterval': 'Reconnect Interval',
        'settings.reconnectIntervalLabel': 'Interval (seconds):',
        'settings.saveSuccess': 'Settings successfully saved',
        'settings.reloadSuccess': 'Settings reloaded',
        'settings.saveError': 'Error saving settings',
        'settings.reloadError': 'Error reloading settings',
        'settings.loadError': 'Error loading settings',
        'settings.reload': 'Reload from file'
    }
};

let currentLanguage = localStorage.getItem('language') || 'ru';

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
function t(key) {
    return translations[currentLanguage][key] || key;
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
function applyTranslations() {
    // –ü–µ—Ä–µ–≤–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å data-i18n
    document.querySelectorAll('[data-i18n]').forEach(element => {
        const key = element.getAttribute('data-i18n');
        element.textContent = t(key);
    });

    // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∞—Ç—Ä–∏–±—É—Ç—ã title —Å data-i18n-title
    document.querySelectorAll('[data-i18n-title]').forEach(element => {
        const key = element.getAttribute('data-i18n-title');
        element.title = t(key);
    });

    // –ü–µ—Ä–µ–≤–æ–¥–∏–º placeholder —Å data-i18n-placeholder
    document.querySelectorAll('[data-i18n-placeholder]').forEach(element => {
        const key = element.getAttribute('data-i18n-placeholder');
        element.placeholder = t(key);
    });
}

// –§—É–Ω–∫—Ü–∏—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
function changeLanguage(lang) {
    currentLanguage = lang;
    localStorage.setItem('language', lang);
    applyTranslations();

    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–∫–ª–∞–¥–∫—É —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    loadCurrentTab();
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
const API_BASE = '/api';
const API_CREDENTIALS = btoa('admin:secret'); // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –ø–æ–ª—É—á–∞—Ç—å —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentTab = 'status';
let refreshInterval;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function () {
    setupNavigation();
    setupLanguageSwitcher();
    applyTranslations();
    loadCurrentTab();
    startAutoRefresh();
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è —è–∑—ã–∫–∞
function setupLanguageSwitcher() {
    const languageSelect = document.getElementById('language-select');
    languageSelect.value = currentLanguage;

    languageSelect.addEventListener('change', function () {
        changeLanguage(this.value);
    });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
function setupNavigation() {
    const tabs = document.querySelectorAll('.nav-tab');
    tabs.forEach(tab => {
        tab.addEventListener('click', function () {
            const tabName = this.getAttribute('data-tab');
            switchTab(tabName);
        });
    });
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
function switchTab(tabName) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    document.querySelectorAll('.nav-tab').forEach(tab => {
        tab.classList.remove('active');
    });
    document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');

    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–Ω—Ç—ã
    document.querySelectorAll('.tab-content').forEach(content => {
        content.classList.remove('active');
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    document.getElementById(tabName).classList.add('active');
    currentTab = tabName;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
    loadCurrentTab();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏
function loadCurrentTab() {
    switch (currentTab) {
        case 'status':
            loadStatus();
            break;
        case 'inputs':
            loadInputs();
            break;
        case 'outputs':
            loadOutputsInitial(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            break;
        case 'settings':
            loadSettings();
            break;
    }
}

// –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
function startAutoRefresh() {
    refreshInterval = setInterval(async () => {
        if (currentTab === 'status') {
            loadStatus();
        } else if (currentTab === 'outputs') {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å—ã –≤—ã—Ö–æ–¥–æ–≤, –Ω–µ —Ç—Ä–æ–≥–∞–µ–º —Ñ–æ—Ä–º—É
            loadOutputs(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        }
    }, 5000); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏
function refreshCurrentTab() {
    if (currentTab === 'outputs') {
        // –î–ª—è –≤—ã—Ö–æ–¥–æ–≤ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å—ã
        loadOutputsInitial();
    } else {
        loadCurrentTab();
    }
}

// API —Ñ—É–Ω–∫—Ü–∏–∏
async function apiRequest(endpoint, options = {}) {
    const url = `${API_BASE}${endpoint}`;
    const defaultOptions = {
        headers: {
            'Authorization': `Basic ${API_CREDENTIALS}`,
            'Content-Type': 'application/json'
        }
    };

    try {
        const response = await fetch(url, { ...defaultOptions, ...options });

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        if (response.headers.get('content-type')?.includes('application/json')) {
            return await response.json();
        }

        return { success: true };
    } catch (error) {
        console.error('API Error:', error);
        throw error;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
async function loadStatus() {
    try {
        const statuses = await apiRequest('/status/all');
        displayStatus(statuses);
    } catch (error) {
        showError(t('status.loadError') + ': ' + error.message);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
function displayStatus(statuses) {
    const container = document.getElementById('status-content');
    const currentTime = new Date().toLocaleTimeString();

    if (!statuses || statuses.length === 0) {
        container.innerHTML = `<div class="alert alert-error">${t('status.noInputs')}</div>`;
        return;
    }

    const html = `
        <div style="margin-bottom: 20px; color: #6c757d; font-size: 0.9em;">
            ${t('common.lastUpdate')}: ${currentTime}
        </div>
        ${statuses.map(input => `
            <div class="status-card">
                <h3>
                    <span class="status-indicator ${input.active ? 'status-active' : 'status-inactive'}"></span>
                    ${input.name}
                </h3>
                <p><strong>${t('common.path')}:</strong> ${input.url_path}</p>
                <p><strong>${t('common.status')}:</strong> ${input.active ? t('common.active') : t('common.inactive')}</p>
                <p><strong>${t('common.connections')}:</strong> ${input.connections}</p>
                <p><strong>${t('common.errors')}:</strong> ${input.error_count}</p>
                
                ${input.outputs && input.outputs.length > 0 ? `
                    <h4 style="margin-top: 15px; margin-bottom: 10px;">${t('common.outputs')}:</h4>
                    ${input.outputs.map(output => `
                        <div class="output-item">
                            <div class="output-info">
                                <div class="output-url">${output.url}</div>
                                <div class="output-stats">
                                    ${t('common.status')}: <span style="color: ${output.active ? '#27ae60' : '#e74c3c'}; font-weight: bold;">${output.active ? t('common.active') : t('common.inactive')}</span> | 
                                    ${t('common.bitrate')}: <strong>${(output.bitrate_kbps || 0).toFixed(1)} kbps</strong> | 
                                    ${t('common.uptime')}: <strong>${output.uptime || '00:00:00'}</strong> | 
                                    ${t('common.errors')}: <strong>${output.error_count || 0}</strong>
                                </div>
                            </div>
                            <div class="output-actions">
                                <button class="btn btn-warning btn-small" onclick="reconnectOutput('${input.name}', '${output.url}')" title="${t('common.reconnect')}">
                                    üîÑ
                                </button>
                            </div>
                        </div>
                    `).join('')}
                ` : `<p>${t('status.noOutputs')}</p>`}
            </div>
        `).join('')}
    `;

    container.innerHTML = html;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Ö–æ–¥–æ–≤
async function loadInputs() {
    try {
        const inputs = await apiRequest('/inputs');
        displayInputs(inputs);
    } catch (error) {
        showError(t('inputs.loadError') + ': ' + error.message);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ö–æ–¥–æ–≤
function displayInputs(inputs) {
    const container = document.getElementById('inputs-content');

    const html = `
        <div class="form-group">
            <h3>${t('inputs.addNew')}</h3>
            <form id="add-input-form">
                <div class="form-row">
                    <div class="form-group">
                        <label>${t('inputs.inputName')}:</label>
                        <input type="text" class="form-control" id="input-name" placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä: obs" required>
                    </div>
                    <div class="form-group">
                        <label>${t('inputs.rtmpPath')}:</label>
                        <input type="text" class="form-control" id="input-path" placeholder="/live/stream" required>
                    </div>
                </div>
                <div class="form-group">
                    <label>${t('inputs.outputsLabel')}</label>
                    <textarea class="form-control" id="input-outputs" rows="3" placeholder="${t('inputs.outputsPlaceholder')}"></textarea>
                </div>
                <button type="submit" class="btn btn-success">${t('common.add')} ${t('nav.inputs').replace('üì• ', '').toLowerCase()}</button>
            </form>
        </div>
        
        <div class="form-group">
            <h3>${t('inputs.existing')}</h3>
            ${inputs.length === 0 ? `<p>${t('inputs.noInputs')}</p>` : inputs.map(input => `
                <div class="output-item">
                    <div class="output-info">
                        <div class="output-url">${input.Name || input.name}</div>
                        <div class="output-stats">
                            ${t('common.path')}: ${input.URLPath || input.url_path} | 
                            ${t('common.outputs')}: ${(input.Outputs || input.outputs || []).length}
                        </div>
                    </div>
                    <div class="output-actions">
                        <button class="btn btn-danger btn-small" onclick="removeInput('${input.Name || input.name}')">
                            üóëÔ∏è
                        </button>
                    </div>
                </div>
            `).join('')}
        </div>
    `;

    container.innerHTML = html;

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã
    document.getElementById('add-input-form').addEventListener('submit', addInput);
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ö–æ–¥–∞
async function addInput(event) {
    event.preventDefault();

    const name = document.getElementById('input-name').value;
    const path = document.getElementById('input-path').value;
    const outputsText = document.getElementById('input-outputs').value;
    const outputs = outputsText.split('\n').filter(url => url.trim() !== '');

    try {
        await apiRequest('/inputs/add', {
            method: 'POST',
            body: JSON.stringify({
                name: name,
                url_path: path,
                outputs: outputs
            })
        });

        showSuccess(t('inputs.addSuccess'));
        loadInputs();
    } catch (error) {
        showError(t('inputs.addError') + ': ' + error.message);
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ö–æ–¥–∞
async function removeInput(name) {
    if (!confirm(`${t('inputs.removeConfirm')} "${name}"?`)) return;

    try {
        await apiRequest(`/inputs/remove?name=${encodeURIComponent(name)}`);
        showSuccess(t('inputs.removeSuccess'));
        loadInputs();
    } catch (error) {
        showError(t('inputs.removeError') + ': ' + error.message);
    }
}

// –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—ã—Ö–æ–¥–æ–≤ (–ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É)
async function loadOutputsInitial() {
    try {
        const inputs = await apiRequest('/inputs');
        const statuses = await apiRequest('/status/all');

        // –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –∏–ª–∏ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!document.getElementById('add-output-form')) {
            createOutputForm(inputs);
        } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫ –≤—Ö–æ–¥–æ–≤ –≤ —Ñ–æ—Ä–º–µ
            updateOutputFormInputs(inputs);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤—ã—Ö–æ–¥–æ–≤
        displayOutputsStatus(statuses);
    } catch (error) {
        showError(t('outputs.loadError') + ': ' + error.message);
        document.getElementById('outputs-status-container').innerHTML = `<div class="loading">${t('outputs.loadError')}...</div>`;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤—ã—Ö–æ–¥–æ–≤ (—Å—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤)
async function loadOutputs() {
    try {
        const statuses = await apiRequest('/status/all');
        displayOutputsStatus(statuses);
    } catch (error) {
        showError(t('outputs.loadError') + ': ' + error.message);
        document.getElementById('outputs-status-container').innerHTML = `<div class="loading">${t('outputs.loadError')}...</div>`;
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞ (–æ–¥–∏–Ω —Ä–∞–∑)
function createOutputForm(inputs) {
    const container = document.getElementById('add-output-form-container');

    if (inputs.length === 0) {
        container.innerHTML = `<div class="alert alert-error">${t('outputs.noInputsForManagement')}</div>`;
        return;
    }

    const html = `
        <div class="form-group">
            <h3>${t('outputs.addOutput')}</h3>
            <form id="add-output-form">
                <div class="form-row">
                    <div class="form-group">
                        <label>${t('outputs.input')}:</label>
                        <select class="form-control" id="output-input" required>
                            ${inputs.map(input => `<option value="${input.Name || input.name}">${input.Name || input.name}</option>`).join('')}
                        </select>
                    </div>
                    <div class="form-group">
                        <label>${t('outputs.outputUrl')}:</label>
                        <input type="text" class="form-control" id="output-url" placeholder="srt://example.com:9000" required>
                    </div>
                </div>
                <button type="submit" class="btn btn-success">${t('common.add')} ${t('nav.outputs').replace('üì§ ', '').toLowerCase()}</button>
            </form>
        </div>
    `;

    container.innerHTML = html;

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã
    const form = document.getElementById('add-output-form');
    if (form) {
        form.addEventListener('submit', addOutput);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Ö–æ–¥–æ–≤ –≤ —Ñ–æ—Ä–º–µ (–±–µ–∑ —Å–±—Ä–æ—Å–∞ –∑–Ω–∞—á–µ–Ω–∏–π)
function updateOutputFormInputs(inputs) {
    const select = document.getElementById('output-input');
    if (!select) return;

    const currentValue = select.value;

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—Ü–∏–∏
    select.innerHTML = inputs.map(input =>
        `<option value="${input.Name || input.name}" ${(input.Name || input.name) === currentValue ? 'selected' : ''}>${input.Name || input.name}</option>`
    ).join('');
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –≤—ã—Ö–æ–¥–æ–≤ (–æ–±–Ω–æ–≤–ª—è–µ–º–∞—è —á–∞—Å—Ç—å)
function displayOutputsStatus(statuses) {
    const container = document.getElementById('outputs-status-container');
    const currentTime = new Date().toLocaleTimeString();

    const html = `
        <div class="form-group">
            <h3>${t('outputs.management')} <small style="color: #6c757d;">(${t('common.updated')}: ${currentTime})</small></h3>
            ${statuses.length === 0 ? `<p>${t('outputs.noActiveInputs')}</p>` : statuses.map(input => `
                <div class="status-card">
                    <h3>
                        <span class="status-indicator ${input.active ? 'status-active' : 'status-inactive'}"></span>
                        ${input.name}
                    </h3>
                    ${input.outputs && input.outputs.length > 0 ? input.outputs.map(output => `
                        <div class="output-item">
                            <div class="output-info">
                                <div class="output-url">${output.url}</div>
                                <div class="output-stats">
                                    ${t('common.status')}: <span style="color: ${output.active ? '#27ae60' : '#e74c3c'}; font-weight: bold;">${output.active ? t('common.active') : t('common.inactive')}</span> | 
                                    ${t('common.bitrate')}: <strong>${(output.bitrate_kbps || 0).toFixed(1)} kbps</strong> | 
                                    ${t('common.uptime')}: <strong>${output.uptime || '00:00:00'}</strong> | 
                                    ${t('common.errors')}: <strong>${output.error_count || 0}</strong>
                                </div>
                            </div>
                            <div class="output-actions">
                                <button class="btn btn-warning btn-small" onclick="reconnectOutput('${input.name}', '${output.url}')" title="${t('common.reconnect')}">
                                    üîÑ
                                </button>
                                <button class="btn btn-danger btn-small" onclick="removeOutput('${input.name}', '${output.url}')" title="${t('common.remove')}">
                                    üóëÔ∏è
                                </button>
                            </div>
                        </div>
                    `).join('') : `<p>${t('status.noOutputs')}</p>`}
                </div>
            `).join('')}
        </div>
    `;

    container.innerHTML = html;
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞
async function addOutput(event) {
    event.preventDefault();

    const inputName = document.getElementById('output-input').value;
    const url = document.getElementById('output-url').value;

    try {
        await apiRequest('/outputs/add', {
            method: 'POST',
            body: JSON.stringify({
                name: inputName,
                url: url
            })
        });

        showSuccess(t('outputs.addSuccess'));

        // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ URL
        document.getElementById('output-url').value = '';

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å—ã –≤—ã—Ö–æ–¥–æ–≤, –Ω–µ —Ç—Ä–æ–≥–∞–µ–º —Ñ–æ—Ä–º—É
        loadOutputs();
    } catch (error) {
        showError(t('outputs.addError') + ': ' + error.message);
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞
async function removeOutput(inputName, url) {
    if (!confirm(`${t('outputs.removeConfirm')} "${url}"?`)) return;

    try {
        await apiRequest('/outputs/remove', {
            method: 'POST',
            body: JSON.stringify({
                name: inputName,
                url: url
            })
        });

        showSuccess(t('outputs.removeSuccess'));

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å—ã –≤—ã—Ö–æ–¥–æ–≤, –Ω–µ —Ç—Ä–æ–≥–∞–µ–º —Ñ–æ—Ä–º—É
        loadOutputs();
    } catch (error) {
        showError(t('outputs.removeError') + ': ' + error.message);
    }
}

// –†–µ–∫–æ–Ω–Ω–µ–∫—Ç –≤—ã—Ö–æ–¥–∞
async function reconnectOutput(inputName, url) {
    try {
        await apiRequest('/outputs/reconnect', {
            method: 'POST',
            body: JSON.stringify({
                name: inputName,
                url: url
            })
        });

        showSuccess(t('outputs.reconnectInitiated'));

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å—ã –≤—ã—Ö–æ–¥–æ–≤ —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
        setTimeout(() => loadOutputs(), 1000);
    } catch (error) {
        showError(t('outputs.reconnectError') + ': ' + error.message);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
async function loadSettings() {
    try {
        const settings = await apiRequest('/settings');
        displaySettings(settings);
    } catch (error) {
        showError(t('settings.loadError') + ': ' + error.message);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
function displaySettings(settings) {
    const container = document.getElementById('settings-content');

    const html = `
        <form id="settings-form">
            <div class="form-group">
                <h3>${t('settings.srt')}</h3>
                <div class="form-row">
                    <div class="form-group">
                        <label>${t('settings.latency')}</label>
                        <input type="number" class="form-control" id="srt-latency" value="${settings.SRTSettings?.Latency || settings.srt_settings?.latency || 120}" min="0">
                    </div>
                    <div class="form-group">
                        <label>${t('settings.timeout')}</label>
                        <input type="number" class="form-control" id="srt-timeout" value="${settings.SRTSettings?.ConnectTimeout || settings.srt_settings?.connect_timeout || 5000}" min="0">
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label>${t('settings.passphrase')}</label>
                        <input type="text" class="form-control" id="srt-passphrase" value="${settings.SRTSettings?.Passphrase || settings.srt_settings?.passphrase || ''}">
                    </div>
                    <div class="form-group">
                        <label>${t('settings.streamId')}</label>
                        <input type="text" class="form-control" id="srt-streamid" value="${settings.SRTSettings?.StreamID || settings.srt_settings?.streamid || ''}">
                    </div>
                </div>
            </div>
            
            <div class="form-group">
                <h3>${t('settings.logging')}</h3>
                <div class="form-row">
                    <div class="form-group">
                        <label>
                            <input type="checkbox" id="log-to-file" ${settings.LogToFile || settings.log_to_file ? 'checked' : ''}>
                            ${t('settings.logToFile')}
                        </label>
                    </div>
                    <div class="form-group">
                        <label>${t('settings.logFile')}</label>
                        <input type="text" class="form-control" id="log-file" value="${settings.LogFile || settings.log_file || 'server.log'}">
                    </div>
                </div>
            </div>
            
            <div class="form-group">
                <h3>${t('settings.reconnectInterval')}</h3>
                <div class="form-group">
                    <label>${t('settings.reconnectIntervalLabel')}</label>
                    <input type="number" class="form-control" id="reconnect-interval" value="${settings.ReconnectInterval || settings.reconnect_interval || 5}" min="1">
                </div>
            </div>
            
            <div class="form-group">
                <button type="submit" class="btn btn-success">${t('common.save')}</button>
                <button type="button" class="btn btn-warning" onclick="reloadSettings()">${t('settings.reload')}</button>
            </div>
        </form>
    `;

    container.innerHTML = html;

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã
    document.getElementById('settings-form').addEventListener('submit', saveSettings);
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
async function saveSettings(event) {
    event.preventDefault();

    const settings = {
        srt_settings: {
            latency: parseInt(document.getElementById('srt-latency').value),
            connect_timeout: parseInt(document.getElementById('srt-timeout').value),
            passphrase: document.getElementById('srt-passphrase').value,
            streamid: document.getElementById('srt-streamid').value,
            encryption: 'none'
        },
        log_to_file: document.getElementById('log-to-file').checked,
        log_file: document.getElementById('log-file').value,
        reconnect_interval: parseInt(document.getElementById('reconnect-interval').value)
    };

    try {
        await apiRequest('/settings', {
            method: 'PUT',
            body: JSON.stringify(settings)
        });

        showSuccess(t('settings.saveSuccess'));
    } catch (error) {
        showError(t('settings.saveError') + ': ' + error.message);
    }
}

// –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
async function reloadSettings() {
    try {
        await apiRequest('/settings/reload', { method: 'POST' });
        showSuccess(t('settings.reloadSuccess'));
        loadSettings();
    } catch (error) {
        showError(t('settings.reloadError') + ': ' + error.message);
    }
}

// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showSuccess(message) {
    showAlert(message, 'success');
}

function showError(message) {
    showAlert(message, 'error');
}

function showAlert(message, type) {
    const alert = document.createElement('div');
    alert.className = `alert alert-${type}`;
    alert.textContent = message;

    const container = document.querySelector('.content');
    container.insertBefore(alert, container.firstChild);

    setTimeout(() => {
        alert.remove();
    }, 5000);
} 